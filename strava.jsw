import { fetch } from 'wix-fetch';
import wixData from 'wix-data';
import { getSecret } from 'wix-secrets-backend';


let CLIENT_ID, CLIENT_SECRET;
const TOKEN_URL = 'https://www.strava.com/oauth/token';
const ACTIVITIES_URL = 'https://www.strava.com/api/v3/athlete/activities';
const REDIRECT_URI = 'https://www.pbgel.ca'; // Matches your Strava developer settings

// Function to initialize secrets
async function initializeSecrets() {
    CLIENT_ID = await getSecret('stravaClientId');
    CLIENT_SECRET = await getSecret('stravaClientSecret');
}

// Initialize secrets and ensure they're ready before further operations
(async function setupSecrets() {
    try {
        await initializeSecrets();
        console.log('Secrets initialized successfully');
        // Any other startup code that depends on the secrets can go here
    } catch (error) {
        console.error('Failed to initialize secrets:', error);
    }
})();

/**
 * Generate the Strava OAuth URL
 */
export function getStravaAuthUrl(userId) {
    return `https://www.strava.com/oauth/authorize?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&state=${userId}&scope=read,activity:read&approval_prompt=force`;
}


/**
 * Exchange the authorization code for access and refresh tokens
 */
export async function exchangeToken(code, userId) {
    console.log('Exchanging token with code:', code);

    try {
        const response = await fetch(TOKEN_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                client_id: CLIENT_ID,
                client_secret: CLIENT_SECRET,
                code: code,
                grant_type: 'authorization_code',
                redirect_uri: REDIRECT_URI,
            }),
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Token exchange failed:', response.status, errorText);
            throw new Error(`Token exchange failed: ${response.status} ${errorText}`);
        }

        const tokenData = await response.json();
        console.log('Token exchange successful:', tokenData);

        const tokenRecord = {
            _id: userId, // Use userId as the unique identifier
            accessToken: tokenData.access_token,
            refreshToken: tokenData.refresh_token,
            expiresAt: tokenData.expires_at,
        };

        try {
            await wixData.update('Tokens', tokenRecord);
            console.log('Token updated in database:', tokenRecord);
        } catch {
            await wixData.insert('Tokens', tokenRecord);
            console.log('Token saved to database:', tokenRecord);
        }
    } catch (error) {
        console.error('Error during token exchange:', error.message);
        throw error;
    }
}

/**
 * Fetch activities from Strava
 */
export async function getStravaActivities(userId) {
    try {
        const tokenRecord = await wixData.get('Tokens', userId);

        if (!tokenRecord) {
            throw new Error(`No token found for user ID: ${userId}`);
        }

        const currentTime = Math.floor(Date.now() / 1000);
        if (currentTime >= tokenRecord.expiresAt) {
            console.log('Access token expired. Refreshing token...');
            await refreshToken(userId);
        }

        const updatedTokenRecord = await wixData.get('Tokens', userId);
        const accessToken = updatedTokenRecord.accessToken;

        const response = await fetch(ACTIVITIES_URL, {
            method: 'GET',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Failed to fetch activities:', response.status, errorText);
            throw new Error(`Failed to fetch activities: ${response.status} ${errorText}`);
        }

        const activities = await response.json();
        console.log('Fetched activities:', activities);
        return activities;
    } catch (error) {
        console.error('Error fetching activities:', error.message);
        throw error;
    }
}

/**
 * Refresh the Strava access token
 */
async function refreshToken(userId) {
    const tokenRecord = await wixData.get('Tokens', userId);

    if (!tokenRecord) {
        throw new Error(`No token found for user ID: ${userId}`);
    }

    const response = await fetch(TOKEN_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            client_id: CLIENT_ID,
            client_secret: CLIENT_SECRET,
            grant_type: 'refresh_token',
            refresh_token: tokenRecord.refreshToken,
        }),
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to refresh token:', response.status, errorText);
        throw new Error(`Failed to refresh token: ${response.status} ${errorText}`);
    }

    const tokenData = await response.json();
    console.log('Token refresh successful:', tokenData);

    const updatedTokenRecord = {
        _id: userId,
        accessToken: tokenData.access_token,
        refreshToken: tokenData.refresh_token,
        expiresAt: tokenData.expires_at,
    };

    await wixData.update('Tokens', updatedTokenRecord);
    console.log('Updated token saved to database:', updatedTokenRecord);
}
