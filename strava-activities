import { getStravaActivities } from 'backend/strava.jsw';
import wixUsers from 'wix-users';
import { getStravaAuthUrl, saveStravaTokens, checkUserToken, getTotalDistanceForUser } from 'backend/strava.jsw';
import wixLocation from 'wix-location';


$w.onReady(() => {

    //user strava connection active
    const hasToken = checkUserToken();

    console.log('READY 1...');

    // Get the query parameters from the URL
    const query = wixLocation.query;

    if(!hasToken && query.rc && query.code && query.state){

        // Check if the 'rc' parameter is present
        if (query.rc) {
            // Example: If 'rc=true', display a success message
            if (query.rc === 'true') {
                console.log('Strava connection was successful!');
            //    $w('#statusMessage').text = 'Strava connection was successful!';
            //    $w('#statusMessage').show();


                // Check if `code` and `state` are present in the query
                if (query.code && query.state) {
                    console.log('Processing Strava connection...');
                //   $w('#statusMessage').text = 'Processing Strava connection...';
                //   $w('#statusMessage').show();

                    //Call the backend to save tokens
                    saveStravaTokens(query)
                        .then((response) => {
                            if (response.success) {
                                console.log('Strava connection successful!');
                //               $w('#statusMessage').text = 'Strava connection successful!';
                //               $w('#statusMessage').show();
                            } else {
                                console.log('Failed to save Strava tokens.');
                //               $w('#statusMessage').text = 'Failed to save Strava tokens.';
                //               $w('#statusMessage').show();
                            }
                        })
                        .catch((error) => {
                            console.error('Error saving Strava tokens:', error);
                //          $w('#statusMessage').text = 'An error occurred while connecting to Strava.';
                //          $w('#statusMessage').show();
                        });
                } else {
                    console.log('Invalid or missing query parameters.');
                //   $w('#statusMessage').text = 'Invalid or missing query parameters.';
                //   $w('#statusMessage').show();
                }

            } else {
                console.log('Failed to connect with Strava.');
            //    $w('#statusMessage').text = 'Failed to connect with Strava.';
            //    $w('#statusMessage').show();
            }
        } else {
                console.log('If no rc parameter, hide the status message');
            // If no 'rc' parameter, hide the status message
        //    $w('#statusMessage').hide();
        }
    }else if(!hasToken) {
        console.log('Please, click "connect" to Strava!');
        $w("#connectButton1").show();
        $w('#Section1RegularLongtext1').text = "Connect to Strava and follow your progress";
        $w('#connectButton1').onClick(async () => {
            try {
                const userId = wixUsers.currentUser.id;
                const authUrl = await getStravaAuthUrl(userId);
                wixLocation.to(authUrl);
            } catch (error) {
                console.error('Error generating Strava OAuth URL:', error);
            }
        });
        
        
        
    }else if (hasToken){

        // const userId = wixUsers.currentUser.id;
        // const td = getTotalDistanceForUser(userId);
        // console.log(td);

        // console.log('hide button.... user has token');
        // $w('#connectButton1').hide();
        // $w('#Section1RegularLongtext1').text = "Total Distance so far: " + td;

        $w.onReady(async () => {
            const userId = wixUsers.currentUser.id; // Get the current logged-in user's ID

            try {
                // Await the total distance before using it
                const totalDistance = await getTotalDistanceForUser(userId);
                $w("#Section1RegularLongtext1").text = `Total Distance so far: ${totalDistance.toFixed(2)} based on the past 30 activities!`;
                $w('#connectButton1').hide();
            } catch (error) {
                console.error("Error fetching total distance:", error);
                $w("#Section1RegularLongtext1").text = "Unable to fetch total distance.";
            }
});
    }
});


$w.onReady(() => {
    console.log('Strava connection 2! User has token...');

    checkUserToken()
        .then((result) => {
            if (result.hasToken) {
                console.log('Token exists:', result.tokenData);

                // Perform actions with the token (e.g., fetch Strava activities)
             //   $w('#statusMessage').text = 'You are connected to Strava.';
             //   $w('#statusMessage').show();
            } else {
                console.log('No token found. Prompt user to connect Strava.');
              //  $w('#statusMessage').text = 'You are not connected to Strava.';
              //  $w('#statusMessage').show();

                // Optionally redirect to Strava OAuth flow
              //  $w('#connectStravaButton').show();
            }
        })
        .catch((error) => {
            console.error('Error checking token:', error);
          //  $w('#statusMessage').text = 'An error occurred while checking Strava connection.';
          //  $w('#statusMessage').show();
        });
});





$w.onReady(() => {
    
});


$w.onReady(async function () {


    console.log('Strava connection 3! ... Get activities');

    try {
        const user = wixUsers.currentUser;
        const userId = user.id;

        const activities = await getStravaActivities(userId);
        console.log('Fetched activities:', activities);


        // Calculate total distance and time for the current month
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        let totalDistance = 0; // In meters
        let totalTime = 0; // In seconds

        activities.forEach(activity => {
            const activityDate = new Date(activity.start_date);

            if (
                activityDate.getMonth() === currentMonth &&
                activityDate.getFullYear() === currentYear
            ) {
                totalDistance += activity.distance;
                totalTime += activity.moving_time;
            }
        });

        // Display monthly totals
        const formattedDistance = (totalDistance / 1000).toFixed(2) + ' km'; // Convert to km
        const formattedTime = formatTime(totalTime); // Format time to hh:mm:ss
        $w('#monthlyTotalText').text = `This month's total: ${formattedDistance}, ${formattedTime}`;

        // Prepare data for the repeater
        const repeaterData = activities.map(activity => ({
            _id: activity.id.toString(),
            name: activity.name || 'Unnamed Activity',
            distance: (activity.distance / 1000).toFixed(2) + ' km',
            movingTime: formatTime(activity.moving_time),
            type: activity.type || 'Unknown Type',
            mapImageUrl: activity.map?.summary_polyline
                ? `https://maps.googleapis.com/maps/api/staticmap?size=600x400&path=enc:${activity.map.summary_polyline}&key=AIzaSyCFAFGsRUkqM4MRqoQKqn7o9ithdGgerWs`
                : null,
        }));

        // Populate repeater
        $w('#repeater1').data = repeaterData;

        // Repeater onItemReady - Updated Section
        $w('#repeater1').onItemReady(($item, itemData) => {
            // Set text properties
            $item('#name').text = itemData.name;
            $item('#distance').text = itemData.distance;
            $item('#movingTime').text = itemData.movingTime;
            $item('#type').text = itemData.type;

            // Debugging: Log the mapImageUrl for each activity
            console.log(`Map Image URL for activity ${itemData._id}:`, itemData.mapImageUrl);

            // // Set the map image source
            // if (itemData.mapImageUrl) {
            //     $item('#mapImage1').src = itemData.mapImageUrl; // Assign the URL to the image
            //     $item('#mapImage1').show(); // Ensure the image is visible
            // } else {
            //     $item('#mapImage1').hide(); // Hide the image if the URL is null
            // }
        });
        
    } catch (error) {
        console.error('Error loading activities:', error.message);
        //$w('#errorText').text = 'Failed to load Strava activities. Please try again later.';
    }
    
});

// Function to format time from seconds to hh:mm:ss
function formatTime(seconds) {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    return [h, m, s]
        .map(v => (v < 10 ? '0' + v : v))
        .filter((v, i) => v !== '00' || i > 0)
        .join(':');
}
