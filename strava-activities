import wixData from 'wix-data';
import { getStravaActivities } from 'backend/strava.jsw';
import wixUsers from 'wix-users';
import { getStravaAuthUrl, saveStravaTokens, checkUserToken, getTotalDistanceForUser, udAppend } from 'backend/strava.jsw';
import wixLocation from 'wix-location';


$w.onReady(() => {

    //user strava connection active
    const hasToken = checkUserToken();

    console.log('READY 1...');

    // Get the query parameters from the URL
    const query = wixLocation.query;

    if(!hasToken && query.rc && query.code && query.state){

        // Check if the 'rc' parameter is present
        if (query.rc) {
            // Example: If 'rc=true', display a success message
            if (query.rc === 'true') {
                console.log('Strava connection was successful!');
            //    $w('#statusMessage').text = 'Strava connection was successful!';
            //    $w('#statusMessage').show();


                // Check if `code` and `state` are present in the query
                if (query.code && query.state) {
                    console.log('Processing Strava connection...');
                //   $w('#statusMessage').text = 'Processing Strava connection...';
                //   $w('#statusMessage').show();

                    //Call the backend to save tokens
                    saveStravaTokens(query)
                        .then((response) => {
                            if (response.success) {
                                console.log('Strava connection successful!');
                //               $w('#statusMessage').text = 'Strava connection successful!';
                //               $w('#statusMessage').show();
                            } else {
                                console.log('Failed to save Strava tokens.');
                //               $w('#statusMessage').text = 'Failed to save Strava tokens.';
                //               $w('#statusMessage').show();
                            }
                        })
                        .catch((error) => {
                            console.error('Error saving Strava tokens:', error);
                //          $w('#statusMessage').text = 'An error occurred while connecting to Strava.';
                //          $w('#statusMessage').show();
                        });
                } else {
                    console.log('Invalid or missing query parameters.');
                //   $w('#statusMessage').text = 'Invalid or missing query parameters.';
                //   $w('#statusMessage').show();
                }

            } else {
                console.log('Failed to connect with Strava.');
            //    $w('#statusMessage').text = 'Failed to connect with Strava.';
            //    $w('#statusMessage').show();
            }
        } else {
                console.log('If no rc parameter, hide the status message');
            // If no 'rc' parameter, hide the status message
        //    $w('#statusMessage').hide();
        }
    }else if(!hasToken) {
        console.log('Please, click "connect" to Strava!');
        $w("#connectButton1").show();
        $w('#Section1RegularLongtext1').text = "Connect to Strava and follow your progress";
        $w('#connectButton1').onClick(async () => {
            try {
                const userId = wixUsers.currentUser.id;
                const authUrl = await getStravaAuthUrl(userId);
                wixLocation.to(authUrl);
            } catch (error) {
                console.error('Error generating Strava OAuth URL:', error);
            }
        });
        
        
        
    }else if (hasToken){

        $w.onReady(async () => {
            const userId = wixUsers.currentUser.id; 

            try {
                // Await the total distance before using it
                const totalDistance = await getTotalDistanceForUser(userId);
                $w("#Section1RegularLongtext1").text = `Total Distance so far: ${totalDistance.toFixed(2)} based on the past 30 activities!`;
                $w('#connectButton1').hide();
            } catch (error) {
                console.error("Error fetching total distance:", error);
                $w("#Section1RegularLongtext1").text = "Unable to fetch total distance.";
            }
        });
    }
});

$w.onReady(async function () {
    const user = wixUsers.currentUser;

    if (user.loggedIn) {
        const userId = user.id;
        const result = await udAppend(userId);

        if (result.success) {
            console.log("Activities processed successfully.");
        } else {
            console.error("Error processing activities:", result.message);
        }
    } else {
        console.log("User not logged in.");
    }
});


$w.onReady(async function () {
    try {
        const userId = wixUsers.currentUser.id; // Get the logged-in user's ID

        // Fetch activities from the "StravaActivities" collection
        const queryResult = await wixData.query("StravaActivities")
            .eq("userId", userId) // Match activities to the user
            .find();

        const activities = queryResult.items; // Get the activities array

        // Filter out activities where distance is 0
        const filteredActivities = activities.filter(activity => activity.distance > 0);

        // Prepare data for the repeater
        const repeaterData = filteredActivities.map(activity => ({
            _id: activity._id, // Use the unique ID from the database
            name: activity.name || 'Unnamed Activity',
            distance: (activity.distance / 1000).toFixed(2) + ' km', // Convert distance to kilometers
            elapsedTime: formatTime(activity.elapsed_time || 0), // Format elapsed time
            sportType: activity.sport_type || 'Unknown Type',
            location: activity.timezone || 'Unknown Location',
        }));

        // Bind the repeater's data to the prepared repeaterData
        $w('#repeater1').data = repeaterData;

        // Handle each row when the repeater loads an item
        $w('#repeater1').onItemReady(($item, itemData) => {
            $item('#name').text = itemData.name; // Set the activity name
            $item('#distance').text = itemData.distance; // Display distance in kilometers
            $item('#movingTime').text = itemData.elapsedTime; // Display formatted elapsed time
            $item('#type').text = itemData.sportType; // Display sport type
            $item('#location').text = itemData.location; // Display timezone or location
        });

    } catch (error) {
        console.error('Error loading activities:', error.message);
        $w('#errorText').text = 'Failed to load Strava activities. Please try again later.';
    }
});

/**
 * Helper function to format elapsed time into hh:mm:ss
 */
function formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}
